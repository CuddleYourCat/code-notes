{"apidogProject":"1.0.0","$schema":{"app":"apidog","type":"project","version":"1.2.0"},"info":{"name":"DDCMS SD API","description":"","mockRule":{"rules":[],"enableSystemRule":true}},"apiCollection":[{"name":"Root","id":1163928,"auth":{},"parentId":0,"serverId":"","description":"","identityPattern":{"httpApi":{"type":"methodAndPath","bodyType":""}},"preProcessors":[{"id":"inheritProcessors","type":"inheritProcessors","data":{}}],"postProcessors":[{"id":"inheritProcessors","type":"inheritProcessors","data":{}}],"inheritPostProcessors":{},"inheritPreProcessors":{},"items":[{"name":"azurelocal","api":{"id":"7177908","method":"post","path":"http://localhost:7071/api/upload","parameters":{"query":[{"id":"bM9Qk8t0oo","name":"filename","example":"ruby1_ssl_access_detailed_log-20230325.gz","required":false,"description":"","enable":true,"type":"string"}]},"auth":{},"commonParameters":{"query":[],"body":[],"cookie":[],"header":[]},"responses":[{"id":"7167884","name":"Success","code":500,"contentType":"json","jsonSchema":{"type":"object","properties":{}}}],"responseExamples":[{"name":"Success","data":"","responseId":7167884,"ordering":1}],"requestBody":{"type":"multipart/form-data","parameters":[{"type":"file","name":"file","required":true,"example":"file://C:\\git\\CuddleYourCat\\smart-debit-log-parser\\data\\ruby1_ssl_access_detailed_log-20230324.gz","description":"","id":"nbFDvDpkmg","enable":true}]},"description":"","tags":[],"status":"developing","serverId":"","operationId":"","sourceUrl":"","ordering":34,"cases":[{"id":8976813,"type":"http","path":null,"name":"full file","responseId":7167884,"parameters":{"query":[{"id":"cDi8ane4rL","relatedId":"bM9Qk8t0oo","relatedName":"filename","value":"ruby1_ssl_access_detailed_log-20230325.gz","enable":true,"isDelete":false}],"path":[],"cookie":[],"header":[]},"commonParameters":{"query":[],"body":[],"header":[],"cookie":[]},"requestBody":{"parameters":[{"id":"WkCZd7OCap","relatedId":"nbFDvDpkmg","relatedName":"file","value":"file://C:\\git\\CuddleYourCat\\smart-debit-log-parser\\data\\test.gz","enable":true,"isDelete":false}],"generateMode":"normal"},"auth":{},"advancedSettings":{"disabledSystemHeaders":{},"isDefaultUrlEncoding":2,"disableUrlEncoding":false},"requestResult":null,"preProcessors":[],"postProcessors":[],"inheritPostProcessors":{},"inheritPreProcessors":{}}],"mocks":[],"customApiFields":"{}","advancedSettings":{"disabledSystemHeaders":{}},"mockScript":{},"codeSamples":[],"commonResponseStatus":{},"responseChildren":["BLANK.7167884"],"preProcessors":[],"postProcessors":[],"inheritPostProcessors":{"hsvoJnnlhFtL_taF-B4_6":{"enable":false},"AsE18whbRIOV9p2bLm8Az":{"enable":false},"ZpD0U1Q5OW5ajE0j7gPJE":{"enable":false}},"inheritPreProcessors":{"0EyVmmCohDLbmIW-mS4sk":{"enable":false},"PJPr6JTZ7tINTaklNkgHY":{"enable":false},"Z6qws_uVEyo1cVvVabGYS":{"enable":false},"mKfgkMMtWDE1dDimox4uA":{"enable":false},"so7MKqv9WPwnK5S7Cg_8V":{"enable":false},"9Az9bHiR5DsIyE2mXXG9t":{"enable":false},"S8z2Pv_lhKFuW8_FR9AWg":{"enable":false},"jvcu7Gijxw-CqJIv1Yqe1":{"enable":false},"LVjczLvWZGz6XBAYcjpL1":{"enable":false}}}}]}],"socketCollection":[],"docCollection":[],"responseCollection":[{"id":508223,"createdAt":"2024-04-11T09:31:26.000Z","updatedAt":"2024-04-12T12:33:47.000Z","deletedAt":null,"name":"Root","type":"root","description":"","children":[],"auth":{},"projectId":507621,"projectBranchId":0,"parentId":0,"createdById":420844,"updatedById":420844,"items":[{"_databaseId":2434652,"name":"Unprocessable Entity","code":422,"contentType":"xml","jsonSchema":{"type":"object","properties":{},"x-apidog-orders":["01HT0EDB06W7NSZHQ1HH7EAHZY"],"xml":{"name":"errors","x-attributes":[{"name":"error","value":""}]},"x-apidog-refs":{"01HT0EDB06W7NSZHQ1HH7EAHZY":{"$ref":"#/definitions/1809798"}}},"defaultEnable":true,"folderId":0,"id":2434652,"databaseResponseExamples":[],"responseExamples":[]},{"_databaseId":2434653,"name":"500 Internal Server Error","code":500,"contentType":"html","jsonSchema":{"type":"object","properties":{},"x-apidog-orders":[]},"defaultEnable":true,"folderId":0,"id":2434653,"databaseResponseExamples":[],"responseExamples":[]},{"_databaseId":2434654,"name":"Sucessful Adhoc Payer Response","code":200,"contentType":"xml","jsonSchema":{"type":"object","properties":{"address_1":{"type":"string"},"address_2":{"type":"string"},"address_3":{"type":"string"},"country":{"type":"string"},"county":{"type":"string"},"email_address":{"type":"string"},"first_name":{"type":"string"},"last_name":{"type":"string"},"postcode":{"type":"string"},"promotion":{"type":"string"},"reference_number":{"type":"string"},"start_date":{"type":["string","null"],"xml":{"x-attributes":[{"name":"type","value":"date"}]}},"title":{"type":"string"},"town":{"type":"string"},"debits":{"type":"object","properties":{"debit":{"type":"array","items":{"type":"object","properties":{"amount":{"type":"string"},"debit_date":{"type":"string"}},"required":["amount","debit_date"],"x-apidog-orders":["amount","debit_date"]}}},"required":["debit"],"x-apidog-orders":["debit"]},"service_user":{"type":"object","properties":{"pslid":{"type":"string"}},"required":["pslid"],"x-apidog-orders":["pslid"]}},"x-apidog-refs":{},"x-apidog-orders":["address_1","address_2","address_3","country","county","email_address","first_name","last_name","postcode","promotion","reference_number","start_date","title","town","debits","service_user"],"required":["address_1","address_2","address_3","country","county","email_address","first_name","last_name","postcode","promotion","reference_number","title","town","debits","service_user"]},"defaultEnable":false,"folderId":0,"id":2434654,"databaseResponseExamples":[],"responseExamples":[]},{"_databaseId":2434655,"name":"Sucessful Variable Payer Response Copy","code":200,"contentType":"xml","jsonSchema":{"type":"object","properties":{"address_1":{"type":"string"},"address_2":{"type":"string"},"address_3":{"type":"string"},"country":{"type":"string"},"county":{"type":"string"},"email_address":{"type":"string"},"first_name":{"type":"string"},"last_name":{"type":"string"},"postcode":{"type":"string"},"promotion":{"type":"string"},"reference_number":{"type":"string"},"start_date":{"type":["string","null"],"xml":{"x-attributes":[{"name":"type","value":"date"}]}},"title":{"type":"string"},"town":{"type":"string"},"debits":{"type":"object","properties":{"debit":{"type":"array","items":{"type":"object","properties":{"amount":{"type":"string"},"debit_date":{"type":"string"}},"required":["amount","debit_date"],"x-apidog-orders":["amount","debit_date"]}}},"required":["debit"],"x-apidog-orders":["debit"]},"service_user":{"type":"object","properties":{"pslid":{"type":"string"}},"required":["pslid"],"x-apidog-orders":["pslid"]}},"title":"variable_ddi","x-apidog-refs":{},"x-apidog-orders":["address_1","address_2","address_3","country","county","email_address","first_name","last_name","postcode","promotion","reference_number","start_date","title","town","debits","service_user"],"required":["address_1","address_2","address_3","country","county","email_address","first_name","last_name","postcode","promotion","reference_number","title","town","debits","service_user"],"xml":{"name":"variable_ddi"}},"defaultEnable":false,"folderId":0,"id":2434655,"databaseResponseExamples":[],"responseExamples":[]},{"_databaseId":2434656,"name":"400 With Error List","code":400,"contentType":"xml","jsonSchema":{"$ref":"#/definitions/1809798"},"defaultEnable":true,"folderId":0,"id":2434656,"databaseResponseExamples":[],"responseExamples":[]}]}],"schemaCollection":[],"environments":[],"commonScripts":[{"name":"xml2Json","description":"A wrapper around xml2Js to make it look like xml2Json is being used.  Xml2Json is used by postman scripts, so this wrapper makes the tests easily convertible from Postman.","content":"xml2Json = function(data) {\r\n\r\n    let json = {};\r\n    xml2js.parseString(data, function (err, result) {\r\n        json = result;\r\n    });\r\n    return json;\r\n}","runMode":"independent","stickyOrdering":0,"ordering":71,"id":"349429"},{"name":"setErrors","description":"","content":"setErrors = function (errors) {\r\n    pm.variables.set('expected_errors', errors);\r\n    expectedErrors = errors;\r\n}","runMode":"independent","stickyOrdering":0,"ordering":21,"id":"349430"},{"name":"getErrorMessages","description":"","content":"expectedErrors = pm.variables.get('expected_errors');","runMode":"independent","stickyOrdering":0,"ordering":30,"id":"349431"},{"name":"TestUpdate","description":"","content":"testUpdate = function () {\r\n    const requestJson = pm.variables.get('requestJson');\r\n    const responseJson = xml2Json(pm.response.text());\r\n\r\n    const payerType = pm.variables.get(\"payer_type\");\r\n    const useSchema = pm.variables.get(\"use_schema\");\r\n    const schema = pm.variables.get(`${payerType}_${useSchema}`);\r\n\r\n    // pm.test(\"Response time is less than 800ms\", function () {\r\n    // pm.expect(pm.response.responseTime).to.be.below(800);\r\n    // });\r\n\r\n    if (!pm.variables.get(\"use_base_test\")) {\r\n        run_tests();\r\n    }\r\n    // console.log(JSON.stringify(schema));\r\n    // console.log(JSON.stringify(responseJson));\r\n\r\n    function run_tests() {\r\n\r\n        if (pm.response.code == 200 && useSchema == \"payer_schema\") {\r\n            pm.test(\r\n                `Update ${payerType} Test: Response values match request values`,\r\n                function () {\r\n                    if (requestJson.title && requestJson.title != \"\") {\r\n                        pm.expect(responseJson.adhoc_ddi.title).to.eql(requestJson.title);\r\n                    }\r\n                    if (requestJson.first_name && requestJson.first_name != \"\") {\r\n                        pm.expect(responseJson.adhoc_ddi.first_name).to.eql(\r\n                            requestJson.first_name\r\n                        );\r\n                    }\r\n                    // if(requestJson.company_name && requestJson.company_name != \"\")\r\n                    //     {pm.expect(responseJson.adhoc_ddi.company_name).to.eql(requestJson.company_name);}\r\n                    if (requestJson.first_name && requestJson.first_name != \"\") {\r\n                        pm.expect(responseJson.adhoc_ddi.first_name).to.eql(\r\n                            requestJson.first_name\r\n                        );\r\n                    }\r\n                    if (requestJson.last_name && requestJson.last_name != \"\") {\r\n                        pm.expect(responseJson.adhoc_ddi.last_name).to.eql(\r\n                            requestJson.last_name\r\n                        );\r\n                    }\r\n                    if (requestJson.address_1 && requestJson.address_1 != \"\") {\r\n                        pm.expect(responseJson.adhoc_ddi.address_1).to.eql(\r\n                            requestJson.address_1\r\n                        );\r\n                    }\r\n                    if (requestJson.email_address && requestJson.email_address != \"\") {\r\n                        pm.expect(responseJson.adhoc_ddi.email_address).to.eql(\r\n                            requestJson.email_address\r\n                        );\r\n                    }\r\n                    if (requestJson.address_2 && requestJson.address_2 != \"\") {\r\n                        pm.expect(responseJson.adhoc_ddi.address_2).to.eql(\r\n                            requestJson.address_2\r\n                        );\r\n                    }\r\n                    if (requestJson.address_3 && requestJson.address_3 != \"\") {\r\n                        pm.expect(responseJson.adhoc_ddi.address_3).to.eql(\r\n                            requestJson.address_3\r\n                        );\r\n                    }\r\n                    if (requestJson.town && requestJson.town != \"\") {\r\n                        pm.expect(responseJson.adhoc_ddi.town).to.eql(requestJson.town);\r\n                    }\r\n                    if (requestJson.county && requestJson.county != \"\") {\r\n                        pm.expect(responseJson.adhoc_ddi.county).to.eql(requestJson.county);\r\n                    }\r\n                    if (requestJson.postcode && requestJson.postcode != \"\") {\r\n                        pm.expect(responseJson.adhoc_ddi.postcode).to.eql(\r\n                            requestJson.postcode\r\n                        );\r\n                    }\r\n                    if (requestJson.country && requestJson.country != \"\") {\r\n                        pm.expect(responseJson.adhoc_ddi.country).to.eql(requestJson.country);\r\n                    }\r\n                    if (requestJson.country && requestJson.promotion != \"\") {\r\n                        pm.expect(responseJson.adhoc_ddi.promotion).to.eql(\r\n                            requestJson.promotion\r\n                        );\r\n                    }\r\n                    if (requestJson.payer_reference && requestJson.payer_reference != \"\") {\r\n                        pm.expect(responseJson.adhoc_ddi.payer_reference).to.eql(\r\n                            requestJson.payer_reference\r\n                        );\r\n                    }\r\n                    if (requestJson.default_amount && requestJson.default_amount != \"\") {\r\n                        pm.expect(responseJson.adhoc_ddi.default_amount).to.eql(\r\n                            requestJson.default_amount\r\n                        );\r\n                    }\r\n                    if (requestJson.frequency_type && requestJson.frequency_type != \"\") {\r\n                        pm.expect(responseJson.adhoc_ddi.frequency_type).to.eql(\r\n                            requestJson.frequency_type\r\n                        );\r\n                    }\r\n                    if (\r\n                        requestJson.frequency_factor &&\r\n                        requestJson.frequency_factor != \"\"\r\n                    ) {\r\n                        pm.expect(responseJson.adhoc_ddi.frequency_factor).to.eql(\r\n                            requestJson.frequency_factor\r\n                        );\r\n                    }\r\n                }\r\n            );\r\n\r\n            pm.test(`Update ${payerType} Test: empty option not in response`, function () {\r\n                if (requestJson.title && requestJson.title == \"\") {\r\n                    pm.expect(!responseJson.adhoc_ddi.title).to.be(true);\r\n                }\r\n                if (requestJson.address_1 && requestJson.address_1 == \"\") {\r\n                    pm.expect(!responseJson.adhoc_ddi.address_1).to.be(true);\r\n                }\r\n                if (requestJson.email_address && requestJson.email_address == \"\") {\r\n                    pm.expect(!responseJson.adhoc_ddi.email_address).to.be(true);\r\n                }\r\n                if (requestJson.address_2 && requestJson.address_2 == \"\") {\r\n                    pm.expect(!responseJson.adhoc_ddi.address_2).to.be(true);\r\n                }\r\n                if (requestJson.address_3 && requestJson.address_3 == \"\") {\r\n                    pm.expect(!responseJson.adhoc_ddi.address_3).to.be(true);\r\n                }\r\n                if (requestJson.town && requestJson.town == \"\") {\r\n                    pm.expect(!responseJson.adhoc_ddi.town).to.be(true);\r\n                }\r\n                if (requestJson.county && requestJson.county == \"\") {\r\n                    pm.expect(!responseJson.adhoc_ddi.county).to.be(true);\r\n                }\r\n                if (requestJson.postcode && requestJson.postcode == \"\") {\r\n                    pm.expect(!responseJson.adhoc_ddi.postcode).to.be(true);\r\n                }\r\n                if (requestJson.country && requestJson.country == \"\") {\r\n                    pm.expect(!responseJson.adhoc_ddi.country).to.be(true);\r\n                }\r\n                if (requestJson.country && requestJson.country == \"\") {\r\n                    pm.expect(!responseJson.adhoc_ddi.promotion).to.be(true);\r\n                }\r\n                if (requestJson.payer_reference && requestJson.payer_reference == \"\") {\r\n                    pm.expect(!responseJson.adhoc_ddi.payer_reference).to.be(true);\r\n                }\r\n                if (requestJson.frequency_type && requestJson.frequency_type == \"\") {\r\n                    pm.expect(!responseJson.adhoc_ddi.frequency_type).to.be(true);\r\n                }\r\n                if (requestJson.frequency_factor && requestJson.frequency_factor == \"\") {\r\n                    pm.expect(!responseJson.adhoc_ddi.frequency_factor).to.be(true);\r\n                }\r\n            });\r\n\r\n            pm.test(`Update ${payerType} Test: required fields have been updated`, function () {\r\n                let keys = pm.variables.get(\"updated_fields\");\r\n                if (!keys) {\r\n                    return;\r\n                }\r\n                // Loop through the keys array\r\n                for (let key of keys) {\r\n                    if (responseJson.adhoc_ddi.hasOwnProperty(key)) {\r\n                        pm.expect(responseJson.adhoc_ddi[key]).to.equal(requestJson[key]);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n}","runMode":"independent","stickyOrdering":0,"ordering":40,"id":"349432"},{"name":"decrementUpdateAmount","description":"","content":"var newAmount = Number(pm.environment.get('update_amount'));\r\n\r\nif(pm.response.code == 200){\r\n    pm.environment.set('update_amount', `${newAmount - 1}`)\r\n}","runMode":"independent","stickyOrdering":0,"ordering":50,"id":"349433"},{"name":"generateRandomUKPostcode","description":"","content":"generateRandomUKPostcode = function (delimeter) {\r\n    const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n    const numbers = '0123456789';\r\n\r\n    // Randomly select two letters for the area code\r\n    const areaCode = letters.charAt(Math.floor(Math.random() * letters.length)) +\r\n        letters.charAt(Math.floor(Math.random() * letters.length));\r\n\r\n    // Randomly select one or two digits for the district number\r\n    const districtNumber = numbers.charAt(Math.floor(Math.random() * numbers.length)) +\r\n        (Math.random() > 0.5 ? numbers.charAt(Math.floor(Math.random() * numbers.length)) : '');\r\n\r\n    // Randomly select a space or no space (to account for both formats)\r\n    const space = delimeter ?? ' ';\r\n\r\n    // Randomly select one number for the sector\r\n    const sector = numbers.charAt(Math.floor(Math.random() * numbers.length));\r\n\r\n    // Randomly select two letters for the unit code\r\n    const unitCode = letters.charAt(Math.floor(Math.random() * letters.length)) +\r\n        letters.charAt(Math.floor(Math.random() * letters.length));\r\n\r\n    // Combine all parts to form the postcode\r\n    return areaCode + districtNumber + space + sector + unitCode;\r\n}","runMode":"independent","stickyOrdering":0,"ordering":60,"id":"349434"},{"name":"clientSettings","description":"","content":"var moment = require('moment');\r\n\r\nclientSettings = function () {\r\n    const settings = {\r\n        royalfree: {\r\n            maxDebitAmountPence: 50000,\r\n            earliestFirstPayment: addWorkingDays(moment(), 10),\r\n            cutoffForPayment: addWorkingDays(moment(), 5),\r\n            paymentDueLookForwardDays: addWorkingDays(moment(), 4),\r\n            cutoffTime: pm.environment.get(\"env\") == \"DDCMS\" ? \"12:00\" : \"00:00\",\r\n            chargeFileCutoffMessage: '`Debit date must not be before the next charge file cut off:`',\r\n            existingContract:\r\n                pm.environment.get(\"env\") == \"SD\" ? \"SP103REF15\" : \"TST-LD000002\",\r\n            existingCustomer:\r\n                pm.environment.get(\"env\") == \"SD\" ? \"SP103REF15\" : \"test06\",\r\n        },\r\n        testcustomer: {\r\n            sun: 99999,\r\n            maxDebitAmountPence: 25000,\r\n            earliestFirstPayment: addWorkingDays(moment(), 5),\r\n            cutoffForPayment: addWorkingDays(moment(), 3),\r\n            paymentDueLookForwardDays: addWorkingDays(moment(), 2),\r\n            cutoffTime: pm.environment.get(\"env\") == \"DDCMS\" ? \"12:00\" : \"00:00\",\r\n            existingContract:\r\n                pm.environment.get(\"env\") == \"SD\" ? \"275online\" : \"1195neural\",\r\n            existingCustomer:\r\n                pm.environment.get(\"env\") == \"SD\" ? \"275online\" : \"1195neural\",\r\n        }, talkmob: {\r\n            maxDebitAmountPence: 150000,\r\n            earliestFirstPayment: addWorkingDays(moment(), 5),\r\n            cutoffForPayment: addWorkingDays(moment(), 3),\r\n            paymentDueLookForwardDays: addWorkingDays(moment(), 2),\r\n            cutoffTime: pm.environment.get(\"env\") == \"DDCMS\" ? \"12:00\" : \"00:00\",\r\n            existingContract:\r\n                pm.environment.get(\"env\") == \"SD\" ? \"TALK-REF199\" : \"1152open-source\",\r\n            existingCustomer:\r\n                pm.environment.get(\"env\") == \"SD\" ? \"TALK-REF199\" : \"1152open-source\",\r\n        },\r\n    };\r\n\r\n    // successful collection report dates:\r\n    if (pm.environment.get(\"env\") == \"SD\") {\r\n        pm.variables.set(\"collection_date\", \"2023-03-01\");\r\n        settings.royalfree.successfulCollectionDate = \"2023-03-01\";\r\n    } else {\r\n        pm.variables.set(\"collection_date\", \"2023-03-10\");\r\n        settings.royalfree.successfulCollectionDate = \"2023-03-10\";\r\n    }\r\n\r\n    return settings;\r\n}","runMode":"independent","stickyOrdering":0,"ordering":70,"id":"349435"},{"name":"chargeFileCutoffMessage","description":"","content":"chargeFileCutoffMessage = function(pslid, requestDate) {\r\n\r\n    var moment = require('moment');\r\n    const requestedDate = new moment(requestDate);\r\n    const cutoffDate = clientSettings()[pslid].cutoffForPayment;\r\n    const cutoffTime = clientSettings()[pslid].cutoffTime;\r\n\r\n    return `${requestedDate.format(\"YYYY-MM-DD\")} ${cutoffTime} (local=${requestedDate.format(\"YYYY-MM-DD\")} ${cutoffTime}) &lt; ${cutoffDate.format(\"YYYY-MM-DD\")} ${cutoffTime} (local=${cutoffDate.format(\"YYYY-MM-DD\")} ${cutoffTime}) SOONEST IS ${cutoffDate.format(\"YYYY-MM-DD\")} ${cutoffTime}`;\r\n}","runMode":"independent","stickyOrdering":0,"ordering":20,"id":"349436"},{"name":"addWorkingDays(fromDate, numDays)","description":"","content":"addWorkingDays = function (fromDate, numDays) {\r\n    if (numDays < 0) {\r\n        return subtractWorkingDays(fromDate, numDays);\r\n    }\r\n    if (numDays == 0) {\r\n        return fromDate;\r\n    }\r\n    for (d = 1; d <= numDays; d++) {\r\n        fromDate.add(1, \"days\");\r\n        if (fromDate.day() == 0 || fromDate.day() == 6) {\r\n            fromDate.day() == 0 ? fromDate.add(1, \"days\") : fromDate.add(2, \"days\");\r\n        }\r\n        // bank holidays\r\n        if (fromDate.isSame(\"2023-04-07\", \"day\")) fromDate.add(4, \"days\");\r\n        if (fromDate.isSame(\"2023-04-10\", \"day\")) fromDate.add(1, \"days\");\r\n        if (fromDate.isSame(\"2023-05-01\", \"day\")) fromDate.add(1, \"days\");\r\n        if (fromDate.isSame(\"2023-05-08\", \"day\")) fromDate.add(1, \"days\");\r\n        if (fromDate.isSame(\"2023-05-29\", \"day\")) fromDate.add(1, \"days\");\r\n        if (fromDate.isSame(\"2023-08-28\", \"day\")) fromDate.add(1, \"days\");\r\n        if (fromDate.isSame(\"2023-12-25\", \"day\")) fromDate.add(2, \"days\");\r\n        if (fromDate.isSame(\"2023-12-26\", \"day\")) fromDate.add(1, \"days\");\r\n        if (fromDate.isSame(\"2024-01-01\", \"day\")) fromDate.add(1, \"days\");\r\n    }\r\n    return fromDate;\r\n}\r\n","runMode":"independent","stickyOrdering":0,"ordering":81,"id":"349437"},{"name":"subtractWorkingDays(fromDate, numDays)","description":"","content":"subtractWorkingDays = function (fromDate, numDays) {\r\n    if (numDays > 0) {\r\n        return addWorkingDays(fromDate, numDays);\r\n    }\r\n    if (numDays == 0) {\r\n        return fromDate;\r\n    }\r\n    for (d = 1; d <= numDays * -1; d++) {\r\n        fromDate.subtract(1, \"days\");\r\n        if (fromDate.day() == 0 || fromDate.day() == 6) {\r\n            fromDate.day() == 0\r\n                ? fromDate.subtract(2, \"days\")\r\n                : fromDate.subtract(1, \"days\");\r\n        }\r\n    }\r\n    return fromDate;\r\n}","runMode":"independent","stickyOrdering":0,"ordering":91,"id":"349438"},{"name":"randomBit","description":"","content":"pm.globals.set('randomBit', Math.floor(Math.random() + 1)); pm.globals.set('randomBit', Math.floor(Math.random() + 1) === 1);","runMode":"independent","stickyOrdering":0,"ordering":101,"id":"349439"},{"name":"setDateVariables() ","description":"","content":"const moment = require(\"moment\");\r\n\r\nif (pm.variables.get(\"pslid\") == \"royalfree\") {\r\n    const startOfNextMonth = moment().add(2, \"months\").startOf(\"month\");\r\n    pm.variables.set(\r\n        \"start_date\",\r\n        startOfNextMonth.format(\"YYYY-MM-DD\")\r\n    );\r\n        pm.variables.set(\r\n        \"start-date\",\r\n        startOfNextMonth.format(\"YYYY-MM-DD\")\r\n    );\r\n} else {\r\n    pm.variables.set(\r\n        \"start_date\",\r\n        addWorkingDays(new moment(), 12).format(\"YYYY-MM-DD\")\r\n    );\r\n    pm.variables.set(\r\n        \"start-date\",\r\n        addWorkingDays(new moment(), 12).format(\"YYYY-MM-DD\")\r\n    );\r\n}\r\n\r\n let targetDate = moment();\r\n    pm.variables.set( \"today\", targetDate.format (\"YYYY-MM-DD\"));\r\n    pm.variables.set( \"next_working_day\",addWorkingDays(targetDate, 1).format (\"YYYY-MM-DD\")    );\r\n    pm.variables.set( \"in_two_working_days\",addWorkingDays(targetDate, 1).format (\"YYYY-MM-DD\"));\r\n    pm.variables.set( \"in_three_working_days\",addWorkingDays(targetDate, 1).format (\"YYYY-MM-DD\"));\r\n    pm.variables.set( \"in_four_working_days\",addWorkingDays(targetDate, 1).format (\"YYYY-MM-DD\"));\r\n    pm.variables.set( \"in_five_working_days\",addWorkingDays(targetDate, 1).format (\"YYYY-MM-DD\"));\r\n    pm.variables.set( \"in_six_working_days\",addWorkingDays(targetDate, 1).format (\"YYYY-MM-DD\"));\r\n    pm.variables.set( \"in_seven_working_days\",addWorkingDays(targetDate, 1).format (\"YYYY-MM-DD\"));\r\n\r\n    let datePast = moment().subtract(1, \"days\");\r\n    pm.variables.set( \"yesterday\", datePast.format (\"YYYY-MM-DD\"));\r\n    pm.variables.set( \"two_working_days_ago\", addWorkingDays(datePast, -1).format (\"YYYY-MM-DD\"));\r\n    pm.variables.set( \"three_working_days_ago\", addWorkingDays(datePast, -1).format (\"YYYY-MM-DD\"));\r\n    pm.variables.set( \"four_working_days_ago\", addWorkingDays(datePast, -1).format (\"YYYY-MM-DD\"));\r\n    pm.variables.set( \"five_working_days_ago\", addWorkingDays(datePast, -1).format (\"YYYY-MM-DD\"));\r\n    pm.variables.set( \"six_working_days_ago\", addWorkingDays(datePast, -1).format (\"YYYY-MM-DD\"));\r\n    pm.variables.set( \"seven_working_days_ago\", addWorkingDays(datePast, -1).format (\"YYYY-MM-DD\"));\r\n    \r\n    let dateMonth = addWorkingDays(moment(), 1);\r\n    pm.variables.set( \"next_month\",dateMonth.add(1, \"months\").format (\"YYYY-MM-DD\"));\r\n    pm.variables.set( \"in_two_months\", dateMonth.add(1, \"months\").format (\"YYYY-MM-DD\") );\r\n    pm.variables.set( \"in_three_months\", dateMonth.add(1, \"months\").format (\"YYYY-MM-DD\") );\r\n    pm.variables.set( \"in_four_months\", dateMonth.add(1, \"months\").format (\"YYYY-MM-DD\") );\r\n    pm.variables.set( \"in_five_months\", dateMonth.add(1, \"months\").format (\"YYYY-MM-DD\") );\r\n    pm.variables.set( \"in_six_months\", dateMonth.add(1, \"months\").format (\"YYYY-MM-DD\") );\r\n    pm.variables.set( \"in_seven_months\", dateMonth.add(1, \"months\").format (\"YYYY-MM-DD\") );\r\n\r\n    pm.variables.set( \"in_one_year\",moment().add(1, \"years\").format (\"YYYY-MM-DD\"));\r\n    pm.variables.set( \"in_five_years\",moment().add(5, \"years\").format (\"YYYY-MM-DD\"));\r\n    pm.variables.set( \"in_ten_years\",moment().add(10, \"years\").format (\"YYYY-MM-DD\"));\r\n    pm.variables.set( \"one_year_ago\", moment().subtract(1, \"years\").format (\"YYYY-MM-DD\"));\r\n    pm.variables.set( \"five_years_ago\",moment().subtract(5, \"years\").format (\"YYYY-MM-DD\"));\r\n    pm.variables.set( \"ten_years_ago\",moment().subtract(10, \"years\").format (\"YYYY-MM-DD\"));\r\n\r\nlet monthDay = moment().endOf('month');\r\n\r\n    pm.variables.set( \"next_month_1\", monthDay.add(1, \"days\").format (\"YYYY-MM-DD\"));\r\n    pm.variables.set( \"next_month_2\",monthDay.add(1, \"days\").format (\"YYYY-MM-DD\"));\r\n    pm.variables.set( \"next_month_3\",monthDay.add(1, \"days\").format (\"YYYY-MM-DD\"));\r\n    pm.variables.set( \"next_month_4\",monthDay.add(1, \"days\").format (\"YYYY-MM-DD\"));\r\n    pm.variables.set( \"next_month_5\",monthDay.add(1, \"days\").format (\"YYYY-MM-DD\"));\r\n    pm.variables.set( \"next_month_6\",monthDay.add(1, \"days\").format (\"YYYY-MM-DD\"));\r\n    pm.variables.set( \"next_month_7\",monthDay.add(1, \"days\").format (\"YYYY-MM-DD\"));\r\n    pm.variables.set( \"next_month_8\",monthDay.add(1, \"days\").format (\"YYYY-MM-DD\"));\r\n    pm.variables.set( \"next_month_9\",monthDay.add(1, \"days\").format (\"YYYY-MM-DD\"));\r\n    pm.variables.set( \"next_month_10\",monthDay.add(1, \"days\").format (\"YYYY-MM-DD\"));\r\n    pm.variables.set( \"next_month_11\",monthDay.add(1, \"days\").format (\"YYYY-MM-DD\"));\r\n    pm.variables.set( \"next_month_12\",monthDay.add(1, \"days\").format (\"YYYY-MM-DD\"));\r\n    pm.variables.set( \"next_month_13\",monthDay.add(1, \"days\").format (\"YYYY-MM-DD\"));\r\n    pm.variables.set( \"next_month_14\",monthDay.add(1, \"days\").format (\"YYYY-MM-DD\"));\r\n    pm.variables.set( \"next_month_15\",monthDay.add(1, \"days\").format (\"YYYY-MM-DD\"));\r\n    pm.variables.set( \"next_month_16\",monthDay.add(1, \"days\").format (\"YYYY-MM-DD\"));\r\n    pm.variables.set( \"next_month_17\",monthDay.add(1, \"days\").format (\"YYYY-MM-DD\"));\r\n    pm.variables.set( \"next_month_18\",monthDay.add(1, \"days\").format (\"YYYY-MM-DD\"));\r\n    pm.variables.set( \"next_month_19\",monthDay.add(1, \"days\").format (\"YYYY-MM-DD\"));\r\n    pm.variables.set( \"next_month_20\",monthDay.add(1, \"days\").format (\"YYYY-MM-DD\"));\r\n    pm.variables.set( \"next_month_21\",monthDay.add(1, \"days\").format (\"YYYY-MM-DD\"));\r\n    pm.variables.set( \"next_month_22\",monthDay.add(1, \"days\").format (\"YYYY-MM-DD\"));\r\n    pm.variables.set( \"next_month_23\",monthDay.add(1, \"days\").format (\"YYYY-MM-DD\"));\r\n    pm.variables.set( \"next_month_24\",monthDay.add(1, \"days\").format (\"YYYY-MM-DD\"));\r\n    pm.variables.set( \"next_month_25\",monthDay.add(1, \"days\").format (\"YYYY-MM-DD\"));\r\n    pm.variables.set( \"next_month_26\",monthDay.add(1, \"days\").format (\"YYYY-MM-DD\"));\r\n    pm.variables.set( \"next_month_27\",monthDay.add(1, \"days\").format (\"YYYY-MM-DD\"));\r\n    pm.variables.set( \"next_month_28\",monthDay.add(1, \"days\").format (\"YYYY-MM-DD\"));\r\n    pm.variables.set( \"next_month_29\",monthDay.add(1, \"days\").format (\"YYYY-MM-DD\"));\r\n    pm.variables.set( \"next_month_30\",monthDay.add(1, \"days\").format (\"YYYY-MM-DD\"));\r\n    pm.variables.set( \"next_month_31\",monthDay.add(1, \"days\").format (\"YYYY-MM-DD\"));\r\n\r\n    const startDate = new moment(pm.variables.get (\"start_date\"));\r\n    pm.variables.set( \"start_year\", startDate.year());\r\n    pm.variables.set( \"start_month\", startDate.month() + 1); // zero based\r\n    pm.variables.set( \"start_day\", startDate.date());\r\n\r\n    const endDate = startDate.add (\"2\", \"years\");\r\n    pm.variables.set( \"end_date\", endDate);\r\n    pm.variables.set( \"end_year\", endDate.year());\r\n    pm.variables.set( \"end_month\", endDate.month());\r\n    pm.variables.set( \"end_day\", endDate.date());\r\n","runMode":"independent","stickyOrdering":0,"ordering":111,"id":"349442"},{"name":"setCollectionDates()","description":"","content":"const moment = require('moment');\r\n\r\nconst settings = clientSettings();\r\n\r\npm.variables.set(\"existing_contract_ref\", settings[pm.variables.get(\"pslid\")].existingContract)\r\n\r\nif (pm.variables.get(\"pslid\") == \"royalfree\") {\r\n    const startDate = pm.variables.get(\"start_date\");\r\n    let startDateMoment = new moment(startDate);\r\n    pm.variables.set(\"first_collection_date\", startDateMoment.add(1, 'months').format(\"YYYY-MM-DD\"));\r\n    pm.variables.set(\"second_collection_date\", startDateMoment.add(1, 'months').format(\"YYYY-MM-DD\"));\r\n} else {\r\n    let targetDate = new moment().add(20, 'days');\r\n    pm.variables.set(\"start_date\", targetDate.format(\"YYYY-MM-DD\"));\r\n\r\n    const firstDate = new moment(targetDate);\r\n    const secondDate = new moment(targetDate);\r\n    if (firstDate.day() > 0 && targetDate.day() <= 3) {\r\n        firstDate.add(2, 'days');\r\n    }\r\n    if (firstDate.date() > 27) {\r\n        firstDate.startOf('month').add(1, 'month')\r\n    }\r\n\r\n    secondDate.add(20, 'days');\r\n    if (secondDate.day() > 0 && secondDate.day() <= 3) {\r\n        secondDate.add(2, 'days');\r\n    }\r\n    if (secondDate.date() > 27) {\r\n        secondDate.startOf('month').add(1, 'month')\r\n    }\r\n\r\n    pm.variables.set(\"first_collection_date\", firstDate.format(\"YYYY-MM-DD\"));\r\n    pm.variables.set(\"second_collection_date\", secondDate.format(\"YYYY-MM-DD\"));\r\n}\r\n","runMode":"independent","stickyOrdering":0,"ordering":121,"id":"349443"}],"globalVariables":[{"id":"507621","variables":[{"name":"test-iterator","value":"40","description":"","isBindInitial":false,"initialValue":"40"},{"name":"undefined_last_created_reference_number","value":"","description":"","isBindInitial":true,"initialValue":""}]}],"commonParameters":null,"projectSetting":{"id":"507632","auth":{"type":"noauth"},"servers":[{"name":"Default Server","id":"default"},{"name":"Smart Debit Connector","id":"4eeafd85-db89-47bd-b3d0-84797c70b7b6"}],"gateway":[],"language":"en-US","apiStatuses":["developing","testing","released","deprecated"],"mockSettings":{},"preProcessors":[],"postProcessors":[],"advancedSettings":{},"initialDisabledMockIds":[],"cloudMock":{"security":"free","enable":false,"tokenKey":"apidogToken"}},"customFunctions":[],"projectAssociations":[]}