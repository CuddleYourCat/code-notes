{
	/*
	// Place your snippets for TypeScript here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	"Print to console": {
		"prefix": "log",
		"body": [
			"console.log('$1');",
			"$2"
		],
		"description": "Log output to console"
	}
	
*/
	"Create method decorator": {
		"prefix": "@",
		"body": [
			"export function MethodDecorator(target: any, key: string, descriptor: any) {",
			"}"
		],
		"description": " create a method decorator"
	}
}

// function decoratorFactory(params: Object) {
//     return (target: any, key: string, descriptor: any) => {
//         // implement class decorator here, the class decorator
//         // will have access to the decorator arguments (filter)
//         // because they are  stored in a closure
//     }
// }

// declare type ClassDecorator = <TFunction extends Function>(target: TFunction) => TFunction | void;
// declare type PropertyDecorator = (target: Object, propertyKey: string | symbol) => void;
// declare type MethodDecorator = <T>(target: Object, propertyKey: string | symbol, descriptor: TypedPropertyDescriptor<T>) => TypedPropertyDescriptor<T> | void;
// declare type ParameterDecorator = (target: Object, propertyKey: string | symbol, parameterIndex: number) => void;