{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	//
	"New Payer Header": {
		"prefix": "sd",
		"body": [
			",Bacs Number,Account Name,,Account Sortcode,Account Number,,,,,,,,Title,ForeName,Surname,Company name,Address Line 1,Address Line 2,Address Line 3,Town,County,PostalCode,Country,,,,Email,,Frequency Type,regular amount,first amount,,,Start Year,StartMonth,Start Day,End Year,End Month,End day,,,,Frequency Factor,,Status"
		],
		"description": "All column names for new payer update file"
	},
	"insert-db-script": {
		"prefix": "sd.db",
		"description": "insert a new row into version importer table",
		"scope": "sql",
		"body": [
			"INSERT INTO sd_operations.db_version_importer_${1:VERSION-NUMBER}",
			"(",
			"  `version`,",
			"  `created_on`,",
			"  `description`,",
			"  `order`,",
			"  `upgrade_script`,",
			"  `rollback_script`",
			")",
			"VALUES(",
			"  ${1:version-number},",
			"  NOW(),",
			"  '#${2:TFS-WORK-ITEM-AND-DESCRIPTION}',",
			"  ${3:ORDER},",
			"  \"upgrade_script\",",
			"  \"rollback_script\"",
			");"
		]
	},
	"create-db-version": {
		"prefix": "sd.db",
		"description": "create a db script for sd_operations table",
		"scope": "sql",
		"body": [
			"CREATE TABLE `sd_operations`.`db_version_importer_${1:VERSION-NUMBER}` (",
			"  `id` int(11) NOT NULL AUTO_INCREMENT,",
			"  `version` varchar(50) NOT NULL,",
			"  `created_on` datetime NOT NULL,",
			"  `description` varchar(400) NOT NULL,",
			"  `order` int(11) NOT NULL DEFAULT '1',",
			"  `applied_on` datetime DEFAULT NULL,",
			"  `upgrade_started_at` datetime DEFAULT NULL,",
			"  `upgrade_finished_at` datetime DEFAULT NULL,",
			"  `upgrade_script` blob NOT NULL,",
			"  `rollback_script` blob NOT NULL,",
			"  `rolledback_on` datetime DEFAULT NULL,",
			"  `rollback_started_at` datetime DEFAULT NULL,",
			"  `rollback_finished_at` datetime DEFAULT NULL,",
			"  `is_procedure` tinyint(1) NOT NULL DEFAULT '0',",
			"  PRIMARY KEY (`id`)",
			") ENGINE=InnoDB DEFAULT CHARSET=latin1;",
			"",
			"",
			"INSERT INTO sd_operations.db_version_importer_${1:VERSION-NUMBER} (",
			"        `id`,",
			"        `version`,",
			"        `created_on`,",
			"        `description`,",
			"        `order`,",
			"        `upgrade_script`,",
			"        `rollback_script`",
			"    )",
			"SELECT `id`,",
			"    `version`,",
			"    `created_on`,",
			"    `description`,",
			"    `order`,",
			"    `upgrade_script`,",
			"    `rollback_script`",
			"FROM sd_operations.db_version",
			"WHERE VERSION = ${1:VERSION-NUMBER}",
			"ORDER BY `order`;"
		]
	},
	"AccessPoint by Name": {
		"prefix": "sd.acc",
		"scope": "sql",
		"description": "search by Access Point Name",
		"body": [
			"select id,",
			"@user_id := id as dummy",
			"from pslite_prod.users",
			"where pslite_prod.users.login = '${1:USER-LOGIN}';",
			"",
			"-- search by Access Point Name",
			"select ap.name as AccessPointName,",
			"    ap.category,",
			"    g.name as GroupName,",
			"    g.type,",
			"    ap.entity_state_id,",
			"    gap.allow",
			"from frontnew.user_group ug",
			"    INNER JOIN frontnew.group g ON ug.group_id = g.id",
			"    INNER JOIN frontnew.group_access_point gap ON gap.group_id = g.id",
			"    inner join frontnew.access_point ap on gap.access_point_id = ap.id",
			"where user_id = @user_id",
			"    and ap.name like '${1:ACCESS-POINT-NAME}';",
			""
		]
	},
	"AccessPoint by GroupName": {
		"prefix": "sd.acc",
		"description": "Access Point Search by Group Name",
		"scope": "sql",
		"body": [
			"select id,",
			"@user_id := id as dummy",
			"from pslite_prod.users",
			"where pslite_prod.users.login = '${1:USER-LOGIN}';",
			"",
			"-- Search by Group Name",
			"select ap.name as AccessPointName,",
			"    ap.category,",
			"    g.name as GroupName,",
			"    g.type,",
			"    ap.entity_state_id,",
			"    gap.allow",
			"FROM frontnew.group_access_point gap",
			"    inner JOIN frontnew.group g ON gap.group_id = g.id",
			"    inner join frontnew.access_point ap on gap.access_point_id = ap.id",
			"where g.name = '${2:ACCESS-GROUP-NAME}';",
			""
		]
	},
	"AccessPoint by Category": {
		"prefix": "sd.acc",
		"scope": "sql",
		"description": "create a db script for sd_operations table",
		"body": [
			"select id,",
			"@user_id := id as dummy",
			"from pslite_prod.users",
			"where pslite_prod.users.login = '${1:USER-LOGIN}';",
			"",
			"-- Search by Category",
			"select ap.name as AccessPointName,",
			"    ap.category,",
			"    g.name as GroupName,",
			"    g.type,",
			"    ap.entity_state_id,",
			"    gap.allow",
			"from frontnew.user_group ug",
			"    INNER JOIN frontnew.group g ON ug.group_id = g.id",
			"    INNER JOIN frontnew.group_access_point gap ON gap.group_id = g.id",
			"    inner join frontnew.access_point ap on gap.access_point_id = ap.id",
			"where user_id in (@user_id)",
			"    and allow = 1",
			"    and category like '${2:CATEGORY-NAME}'",
			"order by user_id desc,",
			"    ap.name;",
			""
		]
	},
	"Elmah log": {
		"prefix": "sd.elm",
		"scope": "sql",
		"description": "DESCRIPTION",
		"body": [
			"SELECT * FROM log.elmah_error where host = 'IT0367' order by timeutc desc limit 25;"
		]
	}
}