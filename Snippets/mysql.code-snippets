{
	// Place your SQL Scripts workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body db
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is dbis 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "db",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Create Table": {
		"scope": "sql",
		"prefix": "dbt",
		"body": [
			"CREATE TABLE IF NOT EXISTS `${1:table-name}` (",
			"    `Id` char(36) NOT NULL,",
			"$0,",
			"    PRIMARY KEY (`Id`),",
			") ENGINE = InnoDB DEFAULT CHARSET = latin1;",
		]
	},
	"Define Column": {
		"scope": "sql",
		"prefix": "dbc",
		"body": [
			"`${2:column-name}` ${3|CHAR(36),VARCHAR(200),VARCHAR(400),TINYINT(1),DATE,DATETIME,TIME,DECIMAL(27\\,2),SMALLINT,LONGTEXT,SIGNED,UNSIGNED|} ${4|DEFAULT NULL, NOT NULL|} $0 "
		]
	},
	"Safe Updates Off": {
		"scope": "sql",
		"prefix": "safe",
		"body": [
			"SET SQL_SAFE_UPDATES = 0;"
		]
	},
	"Safe Updates On": {"scope": "sql",
		"prefix": "safe",
		"body": [
			"SET SQL_SAFE_UPDATES = 1;"
		]},
	"Foreign key Constraint": {
		"scope": "sql",
		"prefix": "dbfk",
		"body": [
			"    ,",
			"KEY `FK_${1:this-entity}.${2:this-key}->${3:foreign-entity}` (`$2`),",
			"    CONSTRAINT `FK_$1.$2->$3`",
			"    FOREIGN KEY (`$2`) ",
			"    REFERENCES `$3s` (`Id`) ",
			"    ON DELETE NO ACTION ",
			"    ON UPDATE NO ACTION",
			"",
			"$0",
		]
	},
	"Alter Table": {
		"scope": "sql",
		"prefix": "dbt",
		"body": [
			"ALTER TABLE `${1:table-name}`",
			"",
			"$0"
		]
	},
	"Add Column": {
		"scope": "sql",
		"prefix": "dbc",
		"body": [
			"ADD",
			"  COLUMN `${2:column-name}` ${3|CHAR(36),VARCHAR(200),VARCHAR(400),TINYINT(1),DATE,DATETIME,TIME,DECIMAL(27\\,2),SMALLINT,LONGTEXT,SIGNED,UNSIGNED|} DEFAULT ${4|NULL,0|}",
			"AFTER",
			"  `$5`",
			"",
			"$0"
		]
	},
	"Update Table": {
		"scope": "sql",
		"prefix": "dbt",
		"body": [
			"UPDATE TABLE `${1:table-name}` SET COLUMN `${2:column-name}` = `${3:new-value}` ${4|WHERE,|} $0",
		]
	},
	"Type": {
		"scope": "json, jsonc",
		"prefix": "db",
		"body": [
			"\"\\${${1:int}|CHAR(36),VARCHAR(200),VARCHAR(400),TINYINT(1),DATE,DATETIME,TIME,DECIMAL(27,2),SMALLINT,LONGTEXT,SIGNED,UNSIGNED|\\}\"",
			"",
			"",
			"$0"
		]
	},
	"Type Selection": {
		"scope": "sql",
		"prefix": "db",
		"body": [
			"${1|CHAR(36),VARCHAR(200),VARCHAR(400),TINYINT(1),DATE,DATETIME,TIME,DECIMAL(27,2),SMALLINT,LONGTEXT,SIGNED,UNSIGNED|}"
		]
	},
	"Cast string": {
		"prefix": "db",
		"scope": "sql",
		"description": "cast string as something else",
		"body": [
			"CAST(STRING_VALUE AS ${1|CHAR(36),VARCHAR(200),VARCHAR(400),TINYINT(1),DATE,DATETIME,TIME,DECIMAL(27\\,2),SMALLINT,LONGTEXT,SIGNED,UNSIGNED|})"
		]
	},
	"Delete with Inner Join": {
		"scope": "sql",
		"prefix": "db, sql",
		"description": "use an inner join and a condition to delete from one table",
		"body": [
			"DELETE ${1:table-one}, ${2:table-two}",
			"FROM ${1:table-one}",
			"INNER JOIN ${2:table-two} ON ${1:table-one}.${3:table-one-key} = ${2:table-two}.${4:table-two-foreignkey}",
			"WHERE ${5:condition};"
		]
	},
	"Surround with read uncommitted": {
		"scope": "sql",
		"prefix": "db",
		"description": "Surround with read uncommitted",
		"body": [
			"SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED ;",
			"$TM_SELECTED_TEXT",
			"SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ ;"
		]
	},
	"Insert JSON object into JSON object": {
		"prefix": "db",
		"description": "JSON object",
		"body": [
			"START TRANSACTION;",
			"  ",
			" UPDATE ${1:table-name}",
			"set `value` = ",
			"JSON_INSERT(`value`, '${1:path}', ",
			"    JSON_ARRAY(",
			"       JSON_OBJECT(",
			"           '${2:key}', 'Import'",
			"           , 'AutoProcess', false",
			"           , '${3:array}', JSON_ARRAY() ",
			"           ),",
			"       JSON_OBJECT(",
			"           '${2:key}', 'Duplicate'",
			"           , 'AutoProcess', false",
			"           , '${3:array}', JSON_ARRAY() ",
			"           ),",
			"       )",
			")",
			"WHERE",
			"NOT JSON_CONTAINS_PATH (`value`, 'one', '${1:path}') ;"
		]
	}
}